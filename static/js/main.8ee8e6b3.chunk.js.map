{"version":3,"sources":["components/Robot/RobotCard.module.css","components/UI/InputBox.module.css","components/Robot/Robot.module.css","components/Robot/RobotCard.jsx","components/UI/InputBox.jsx","components/Robot/Robot.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","RobotCard","props","className","classes","src","name","alt","title","InputBox","type","input","value","onChange","inputChange","placeholder","Robot","state","robots","searchTerm","handleInputChange","e","setState","target","fetch","then","response","json","this","filter","robot","toLowerCase","indexOf","toLocaleLowerCase","map","key","id","searchResult","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,2B,qBCAnED,EAAOC,QAAU,CAAC,MAAQ,0B,gBCA1BD,EAAOC,QAAU,CAAC,MAAQ,uB,qNCWXC,EATG,SAAAC,GAChB,OACE,yBAAKC,UAAWC,IAAQH,WACtB,yBAAKI,IAAG,+BAA0BH,EAAMI,MAAQC,IAAI,UACpD,yBAAKJ,UAAWC,IAAQI,OAAxB,SAAsCN,EAAMI,Q,gBCQnCG,EAZE,SAAAP,GACf,OACE,2BACEQ,KAAK,OACLP,UAAWC,IAAQO,MACnBC,MAAOV,EAAMU,MACbC,SAAUX,EAAMY,YAChBC,YAAY,sB,gBC8CHC,E,2MAjDbC,MAAQ,CACNC,OAAQ,GACRC,WAAY,I,EAGdC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOX,S,mFAGlB,IAAD,OAClBY,MAAM,6CAA6CC,MAAK,SAAAC,GAAQ,OAC9DA,EAASC,OAAOF,MAAK,SAAAE,GAAI,OAAI,EAAKL,SAAS,CAAEJ,OAAQS,Y,+BAI/C,IAAD,OACDT,EAASU,KAAKX,MAAMC,OACvBW,QAAO,SAAAC,GACN,OAG6D,IAF3DA,EAAMxB,KACHyB,cACAC,QAAQ,EAAKf,MAAME,WAAWc,wBAGpCC,KAAI,SAAAJ,GACH,OAAO,kBAAC,EAAD,eAAWK,IAAKL,EAAMM,IAAQN,OAGrCO,EACFnB,EAAOoB,OAAS,EACdpB,EAEA,6BACE,uDAIN,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEN,MAAOgB,KAAKX,MAAME,WAClBL,YAAac,KAAKR,oBAEpB,yBAAKjB,UAAWC,IAAQY,OAAQqB,Q,GA5CpBE,aCSLC,MAVf,WACE,OACE,yBAAKrC,UAAU,OACb,wBAAIA,UAAU,aAAd,gBAEA,kBAAC,EAAD,QCEcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.8ee8e6b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RobotCard\":\"RobotCard_RobotCard__2qgLD\",\"title\":\"RobotCard_title__3-67j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputBox_input__3Jt4C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Robot\":\"Robot_Robot__3PhkV\"};","import React from \"react\"\nimport classes from \"./RobotCard.module.css\"\n\nconst RobotCard = props => {\n  return (\n    <div className={classes.RobotCard}>\n      <img src={`https://robohash.org/${props.name}`} alt='robot' />\n      <div className={classes.title}>Name: {props.name}</div>\n    </div>\n  )\n}\n\nexport default RobotCard\n","import React from \"react\"\nimport classes from \"./InputBox.module.css\"\n\nconst InputBox = props => {\n  return (\n    <input\n      type='text'\n      className={classes.input}\n      value={props.value}\n      onChange={props.inputChange}\n      placeholder='Enter Robot Name'\n    ></input>\n  )\n}\n\nexport default InputBox\n","import React, { Component, Fragment } from \"react\"\nimport RobotCard from \"./RobotCard\"\nimport InputBox from \"../UI/InputBox\"\n\nimport classes from \"./Robot.module.css\"\n\nclass Robot extends Component {\n  state = {\n    robots: [],\n    searchTerm: \"\"\n  }\n\n  handleInputChange = e => {\n    this.setState({ searchTerm: e.target.value })\n  }\n\n  componentDidMount() {\n    fetch(\"http://jsonplaceholder.typicode.com/users\").then(response =>\n      response.json().then(json => this.setState({ robots: json }))\n    )\n  }\n\n  render() {\n    const robots = this.state.robots\n      .filter(robot => {\n        return (\n          robot.name\n            .toLowerCase()\n            .indexOf(this.state.searchTerm.toLocaleLowerCase()) !== -1\n        )\n      })\n      .map(robot => {\n        return <RobotCard key={robot.id} {...robot}></RobotCard>\n      })\n\n    let searchResult =\n      robots.length > 1 ? (\n        robots\n      ) : (\n        <div>\n          <h2>No Search Result Found</h2>\n        </div>\n      )\n\n    return (\n      <Fragment>\n        <InputBox\n          value={this.state.searchTerm}\n          inputChange={this.handleInputChange}\n        />\n        <div className={classes.Robot}>{searchResult}</div>\n      </Fragment>\n    )\n  }\n}\n\nexport default Robot\n","import React from \"react\"\n\nimport \"./App.css\"\nimport Robot from \"./components/Robot/Robot.jsx\"\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h2 className='app-title'>Robot Finder</h2>\n\n      <Robot />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}